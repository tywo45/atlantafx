<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>io.github.mkpaz</groupId>
		<artifactId>atlantafx-parent</artifactId>
		<version>2.0.1</version>
	</parent>
	<artifactId>atlantafx-sampler</artifactId>

	<properties>
		<app.launcher>atlantafx.sampler.Launcher</app.launcher>
		<app.module>atlantafx.sampler</app.module>
		<!-- final artifact name -->
		<build.artifactName>${app.name}-${app.version}-${platform}-${os.arch}</build.artifactName>
		<!-- application dependencies that will be included as JAR files -->
		<build.dependenciesDir>
			${project.build.directory}${file.separator}dependencies</build.dependenciesDir>
		<!-- application dependencies that will be bundled into runtime image -->
		<build.platformModulesDir>
			${project.build.directory}${file.separator}platform-modules</build.platformModulesDir>
		<!-- jpackage generated application image root -->
		<build.package.appImageDir>
			${project.build.directory}${file.separator}app-image</build.package.appImageDir>
		<!-- AppDir spec compliant dir for creating AppImage -->
		<build.package.appDir>${project.build.directory}${file.separator}app-dir</build.package.appDir>
		<!-- jlink generated runtime image -->
		<build.package.runtimeImageDir>
			${project.build.directory}${file.separator}runtime-image
		</build.package.runtimeImageDir>
		<!-- contains package scripts after filtering and placeholder
		replacement -->
		<build.package.scriptsDir>
			${project.build.directory}${file.separator}package-scripts</build.package.scriptsDir>
		<!-- jpackage directory for temp artifacts -->
		<build.package.tempDir>
			${project.build.directory}${file.separator}package-temp</build.package.tempDir>
		<!-- final artifacts (zip, deb, rpm...) -->
		<build.releaseDir>${project.build.directory}${file.separator}release</build.releaseDir>
	</properties>

	<dependencies>
		<dependency>
			<groupId>${project.groupId}</groupId>
			<artifactId>atlantafx-base</artifactId>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-controls</artifactId>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-fxml</artifactId>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-swing</artifactId>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-media</artifactId>
		</dependency>
		<dependency>
			<groupId>org.openjfx</groupId>
			<artifactId>javafx-web</artifactId>
		</dependency>
		<dependency>
			<groupId>org.kordamp.ikonli</groupId>
			<artifactId>ikonli-javafx</artifactId>
		</dependency>
		<dependency>
			<groupId>org.kordamp.ikonli</groupId>
			<artifactId>ikonli-feather-pack</artifactId>
		</dependency>
		<dependency>
			<groupId>org.kordamp.ikonli</groupId>
			<artifactId>ikonli-material2-pack</artifactId>
		</dependency>
		<dependency>
			<groupId>org.jetbrains</groupId>
			<artifactId>annotations</artifactId>
		</dependency>
		<dependency>
			<groupId>fr.brouillard.oss</groupId>
			<artifactId>cssfx</artifactId>
		</dependency>
		<dependency>
			<groupId>net.datafaker</groupId>
			<artifactId>datafaker</artifactId>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-api</artifactId>
		</dependency>
		<dependency>
			<groupId>org.junit.jupiter</groupId>
			<artifactId>junit-jupiter-engine</artifactId>
		</dependency>
		<dependency>
			<groupId>org.assertj</groupId>
			<artifactId>assertj-core</artifactId>
		</dependency>
	</dependencies>

	<build>
		<resources>
			<!-- filter resources -->
			<resource>
				<directory>src/main/resources</directory>
				<filtering>false</filtering>
			</resource>
			<resource>
				<directory>src/main/resources</directory>
				<filtering>true</filtering>
				<includes>
					<include>atlantafx/sampler/application.properties</include>
				</includes>
			</resource>
			<!-- copy pages for source code viewer   -->
			<resource>
				<directory>src/main/java/atlantafx/sampler/page</directory>
				<targetPath>atlantafx/sampler/page</targetPath>
				<filtering>false</filtering>
			</resource>
			<!-- copy icons 把icons目录下的图片拷到atlantafx/sampler/assets /-->
			<resource>
				<directory>icons</directory>
				<targetPath>atlantafx/sampler/assets</targetPath>
				<filtering>false</filtering>
			</resource>
			<resource>
				<directory>icons</directory>
				<filtering>false</filtering>
				<targetPath>${project.build.directory}</targetPath>
			</resource>
			<!-- copy and filter build scripts -->
			<resource>
				<directory>src/package-scripts</directory>
				<filtering>true</filtering>
				<targetPath>${build.package.scriptsDir}</targetPath>
			</resource>
		</resources>

		<plugins>
			<!-- compile SCSS -->
			<plugin>
				<groupId>us.hebi.sass</groupId>
				<artifactId>sass-cli-maven-plugin</artifactId>
				<configuration>
					<args>
						<arg>
							${project.basedir}/src/main/resources/atlantafx/sampler/assets/styles/scss/index.scss:${project.build.directory}/classes/atlantafx/sampler/assets/styles/index.css
						</arg>
						<arg>--no-source-map</arg>
					</args>
				</configuration>
				<executions>
					<execution>
						<id>run-sass</id>
						<phase>generate-resources</phase>
						<goals>
							<goal>run</goal>
						</goals>
					</execution>
				</executions>
			</plugin>

			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-jar-plugin</artifactId>
				<configuration>
					<archive>
						<manifest>
							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
							<addDefaultSpecificationEntries>true</addDefaultSpecificationEntries>
						</manifest>
						<addMavenDescriptor>false</addMavenDescriptor> <!--
						生成的jar中，不要包含pom.xml和pom.properties这两个文件 -->
					</archive>

					<finalName>${project.artifactId}</finalName>

					<excludes>
						<exclude>/page/</exclude>
						<exclude>/config/</exclude>
						<exclude>/*.properties</exclude>
						<exclude>/*.xml</exclude>
						<exclude>/*.json</exclude>
						<exclude>/*.pfx</exclude>
						<exclude>/*.cer</exclude>
						<exclude>/*.jf</exclude>
					</excludes>
				</configuration>
			</plugin>

			<!-- The configuration of maven-assembly-plugin -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<executions>
					<execution>
						<id>make-assembly</id> <!--名字任意 -->
						<phase>package</phase> <!-- 绑定到package生命周期阶段上 -->
						<goals>
							<goal>single</goal>
						</goals>
						<configuration>
							<appendAssemblyId>false</appendAssemblyId>
							<descriptors>
								<descriptor>script/pkg.xml</descriptor>
							</descriptors>
							<outputDirectory>${project.build.directory}/</outputDirectory>
							<finalName>${project.artifactId}</finalName>
						</configuration>
					</execution>
				</executions>
			</plugin>
		</plugins>
	</build>

	<profiles>
		<profile>
			<id>dev</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.openjfx</groupId>
						<artifactId>javafx-maven-plugin</artifactId>
						<configuration>
							<options>
								<option>-Datlantafx.mode=dev</option>
							</options>
						</configuration>
					</plugin>
				</plugins>
			</build>
		</profile>
		<profile>
			<id>linux</id>
			<activation>
				<os>
					<family>unix</family>
				</os>
			</activation>
			<properties>
				<app.icon>${project.build.directory}/app-icon.png</app.icon>
				<app.build.compressionAlg>tar.gz</app.build.compressionAlg>
			</properties>
		</profile>
		<profile>
			<id>windows</id>
			<activation>
				<os>
					<family>windows</family>
				</os>
			</activation>
			<properties>
				<app.icon>${project.build.directory}\app-icon.ico</app.icon>
				<app.build.compressionAlg>zip</app.build.compressionAlg>
			</properties>
		</profile>
	</profiles>

</project>
